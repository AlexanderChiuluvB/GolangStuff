1.establish a listen socket, listening to a specfic port and wait for the request
from client side

2.Listen socket receive the request from client side, then know the client socket,
then the server will communicate with the client throguh the client socket

3.处理客户端的请求, 首先从Client Socket读取HTTP请求的协议头, 如果是POST方法, 还可能要读取客户端提交的数据, 然后交给相应的handler处理请求,
handler处理完毕准备好客户端需要的数据, 通过Client Socket写给客户端。

func (srv *Server) Serve(l net.Listener) error {
	defer l.Close()
	var tempDelay time.Duration // how long to sleep on accept failure
	for {
		rw, e := l.Accept()
		if e != nil {
			if ne, ok := e.(net.Error); ok && ne.Temporary() {
				if tempDelay == 0 {
					tempDelay = 5 * time.Millisecond
				} else {
					tempDelay *= 2
				}
				if max := 1 * time.Second; tempDelay > max {
					tempDelay = max
				}
				log.Printf("http: Accept error: %v; retrying in %v", e, tempDelay)
				time.Sleep(tempDelay)
				continue
			}
			return e
		}
		tempDelay = 0
		c, err := srv.newConn(rw)
		if err != nil {
			continue
		}
		go c.serve()//每一个新请求服务器都会新开一个goroutine,相互不影响
	}
}


通过对http包的分析之后，现在让我们来梳理一下整个的代码执行过程。

    首先调用Http.HandleFunc

    按顺序做了几件事：

    1 调用了DefaultServeMux的HandleFunc

    2 调用了DefaultServeMux的Handle

    3 往DefaultServeMux的map[string]muxEntry中增加对应的handler和路由规则

    其次调用http.ListenAndServe(":9090", nil)

    按顺序做了几件事情：

    1 实例化Server

    2 调用Server的ListenAndServe()

    3 调用net.Listen("tcp", addr)监听端口

    4 启动一个for循环，在循环体中Accept请求

    5 对每个请求实例化一个Conn，并且开启一个goroutine为这个请求进行服务go c.serve()

    6 读取每个请求的内容w, err := c.readRequest()

    7 判断handler是否为空，如果没有设置handler（这个例子就没有设置handler），handler就设置为DefaultServeMux

    8 调用handler的ServeHttp

    9 在这个例子中，下面就进入到DefaultServeMux.ServeHttp

    10 根据request选择handler，并且进入到这个handler的ServeHTTP

      mux.handler(r).ServeHTTP(w, r)

    11 选择handler：

    A 判断是否有路由能满足这个request（循环遍历ServeMux的muxEntry）

    B 如果有路由满足，调用这个路由handler的ServeHTTP

    C 如果没有路由满足，调用NotFoundHandler的ServeHTTP

